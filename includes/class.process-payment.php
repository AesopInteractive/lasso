<?php

class aesopEditorProcessPayment {

	function __construct(){
		add_action('init', 		array($this,'process_payment' ) );
	}

	function process_payment() {

		if ( isset( $_POST['action'] ) && 'stripe' == $_POST['action'] && wp_verify_nonce( $_POST['stripe_nonce'], 'stripe-nonce' ) ) {

			global $stripe_options;

			// retrieve the token generated by stripe.js
			$token = $_POST['stripeToken'];

			// check if we are using test mode
			if ( isset( $stripe_options['test_mode'] ) && $stripe_options['test_mode'] ) {

				$secret_key = $stripe_options['test_secret_key'];

			} else {

				$secret_key = $stripe_options['live_secret_key'];

			}

			// attempt to charge the customer's card
			try {

				Stripe::setApiKey($secret_key);

				$charge = Stripe_Charge::create(array(
						'amount' 	=> 1000, // $10
						'currency' 	=> 'usd',
						'card' 		=> $token
					)
				);

				// redirect on successful payment
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);


				wpmu_create_user( 'sweetdog', sanitize_text_field( $password ), 'dude@yo.com' );
				wpmu_create_blog( 'sweetdog', '.story.am', 'Sweet Dog', 'sweetdog');


			} catch (Exception $e) {
				// redirect on failed payment
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}

			// redirect back to our previous page with the added query variable
			wp_redirect($redirect); exit;
		}
	}


}
new aesopEditorProcessPayment;